{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Parameters": {
    "ReplicaRegion": {
      "Type": "String",
      "Default": "us-west-2",
      "Description": "The region destination region for table replication"
    },
    "ControllerTableName": {
      "Type": "String",
      "Default": "ReplicationController",
      "Description": "Name of the DynamoDB table that holds replication metadata"
    },
    "PrefixTableName": {
      "Type": "String",
      "Default": "ReplicationPrefixes",
      "Description": "Name of the DynamoDB table that holds the replication prefixes"
    },
    "ApiName": {
      "Type": "String",
      "Default": "ReplicationApi",
      "Description": "Name of the rest API used to manage replication"
    }
  },
  "Resources": {
    "ReplicatorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/replicator/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationReplicatorPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Logging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "InvokeSelf",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "SourceStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:dynamodb:*:*:table/*/stream/*"
                },
                {
                  "Sid": "ReplicaTable",
                  "Action": [
                    "dynamodb:BatchWriteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "ReplicaRegion" }, "*", "table/*"]]}
                }
              ]
            }
          }
        ]
      }
    },
    "ReplicatorFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Replicator",
        "Description": "Replicate dynamodb table data across regions",
        "Role": { "Fn::GetAtt": [ "ReplicatorRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/replicator/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "MetricRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/metrics/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationMetricPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                  }
              ]
          }
          }
        ]
      }
    },
    "MetricFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Metrics",
        "Description": "Post custom replication metrics to CloudWatch, parsed from a log subscription",
        "Role": { "Fn::GetAtt": [ "MetricRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/replicator/metrics.min.js"
            }
          }
        }
      }
    },
    "MetricSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": "MetricPermission",
      "Properties": {
        "LogGroupName": { "Fn::GetAtt": [ "ReplicatorLogGroup", "LogGroupName" ] },
        "FilterPattern": "[timestamp, request_id, metric=METRIC, table, level,  name, value]",
        "DestinationArn": { "Fn::GetAtt": [ "MetricFunction", "Arn" ] }
      }
    },
    "MetricPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "MetricFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": { "Fn::Join": [ ".", [ "logs", { "Ref": "AWS::Region" }, "amazonaws", "com" ] ] },
        "SourceArn": { "Fn::Join": [ ":", [ "arn", "aws", "logs", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "log-group", { "Fn::GetAtt": [ "ReplicatorLogGroup", "LogGroupName" ] }, "*" ] ] }
      }
    },
    "ReplicatorLogGroup": {
      "Type": "Custom::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : [ "CreateLogGroupFunction", "Arn" ] },
        "FunctionName": { "Ref": "ReplicatorFunction" }
      }
    },
    "CreateLogGroupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/cfn/loggroup/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "CreateLogGroupPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                  }
              ]
            }
          }
        ]
      }
    },
    "CreateLogGroupFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replicator-Cfn-LogGroup",
        "Description": "Endpoint for cloudformation custom resource.  Creates log group for the main replicator function",
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : [ "CreateLogGroupRole", "Arn" ] },
        "Code": {
          "ZipFile": {
            "Fn::Join": ["", [
              "import cfnresponse \n",
              "import boto3 \n",
              "import botocore \n",
              "import json \n",
              " \n",
              "def handler(event, context): \n",
              "    client = boto3.client('logs') \n",
              "    responseStatus = cfnresponse.SUCCESS \n",
              "    responseData = {} \n",
              " \n",
              "    if event['RequestType'] == 'Create' or event['RequestType'] == 'Update': \n",
              "        groupName = '/aws/lambda/%s' % event['ResourceProperties']['FunctionName'] \n",
              "        try: \n",
              "            response = client.create_log_group(logGroupName=groupName) \n",
              "            responseData['LogGroupName'] = groupName \n",
              " \n",
              "        except botocore.exceptions.ClientError as e: \n",
              "            if e.response['Error']['Code'] == 'ResourceAlreadyExistsException': \n",
              "                responseData['LogGroupName'] = groupName \n",
              "            else: \n",
              "                responseData['Error'] = e.response['Error']['Message'] \n",
              "                responseStatus = cfnresponse.FAILED \n",
              " \n",
              "    cfnresponse.send(event, context, responseStatus, responseData) \n"
            ]]
          }
        }
      }
    },
    "ControllerTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Ref": "ControllerTableName" },
        "AttributeDefinitions": [
          {
            "AttributeName": "tableName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "tableName",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "PrefixTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Ref": "PrefixTableName" },
        "AttributeDefinitions": [
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "prefix",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "ControllerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationControllerPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "InvokeFunctions",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "SourceStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" }, "/stream/*" ] ] }
                },
                {
                  "Sid": "ReplicaTable",
                  "Action": [
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ControllerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Controller",
        "Description": "Invokes lambda functions in response to changes in state and/or step on the replication controller table",
        "Role": { "Fn::GetAtt": [ "ControllerRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/index.min.js",
              "context": {
                "replicatorFunction": { "Fn::GetAtt": [ "ReplicatorFunction", "Arn" ] },
                "validateSourceFunction": { "Fn::GetAtt": [ "ValidateSourceFunction", "Arn" ] },
                "validateReplicaFunction": { "Fn::GetAtt": [ "ValidateReplicaFunction", "Arn" ] },
                "createReplicaFunction": { "Fn::GetAtt": [ "CreateReplicaFunction", "Arn" ] },
                "startReplicationFunction": { "Fn::GetAtt": [ "StartReplicationFunction", "Arn" ] },
                "stopReplicationFunction": { "Fn::GetAtt": [ "StopReplicationFunction", "Arn" ] }
              }
            }
          }
        }
      }
    },
    "ControllerEvent": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "ControllerFunction", "Arn" ] },
        "EventSourceArn": { "Fn::GetAtt": [ "ControllerTable", "StreamArn" ] },
        "BatchSize": 1,
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "ValidateSourceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/validate-source/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationValidateSourcePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "ValidateSourceTable",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "AWS::Region"}, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ValidateSourceFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-ValidateSource",
        "Description": "Validates that the source table exists and is configured correctly for replication",
        "Role": { "Fn::GetAtt": [ "ValidateSourceRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/validate-source/index.min.js"
            }
          }
        }
      }
    },
    "ValidateReplicaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/validate-replica/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationValidateReplicaPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "ValidateReplicaTable",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "ReplicaRegion"}, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ValidateReplicaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-ValidateReplica",
        "Description": "Check whether the replica table exists and has a key schema that matches the source",
        "Role": { "Fn::GetAtt": [ "ValidateReplicaRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/validate-replica/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "CreateReplicaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/create-replica/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationCreateReplicaPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "DescribeSource",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ]]}
                },
                {
                  "Sid": "CreateReplica",
                  "Action": [
                    "dynamodb:CreateTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "ReplicaRegion" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "CreateReplicaFunction" : {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-CreateReplica",
        "Description": "Creates a replica table to match the source",
        "Role": { "Fn::GetAtt": [ "CreateReplicaRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/create-replica/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "StartReplicationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/start-replication/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationStartReplicationPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "CreateEventSource",
                  "Action": [
                    "lambda:CreateEventSourceMapping"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "StartReplicationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-StartReplication",
        "Description": "Starts the replication process by adding an event source mapping to the replicator function",
        "Role": { "Fn::GetAtt": [ "StartReplicationRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/start-replication/index.min.js"
            }
          }
        }
      }
    },
    "StopReplicationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/start-replication/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationStartReplicationPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "DeleteEventSource",
                  "Action": [
                    "lambda:DeleteEventSourceMapping"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "StopReplicationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-StopReplication",
        "Description": "Stops the replication process by removing the event source mapping from the replicator function",
        "Role": { "Fn::GetAtt": [ "StopReplicationRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/stop-replication/index.min.js"
            }
          }
        }
      }
    },
    "WatcherCreateRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/create/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherCreatePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "GetPrefixes",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                },
                {
                  "Sid": "AddReplication",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherCreateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Create",
        "Description": "Starts replication for new tables matching one of a list of prefixes (stored in dynamodb)",
        "Role": { "Fn::GetAtt": [ "WatcherCreateRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 260,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/create.min.js",
              "context": {
                "prefixTable": { "Ref": "PrefixTableName" },
                "controllerTable": { "Ref": "ControllerTableName" }
              }
            }
          }
        }
      }
    },
    "WatcherCreateRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher function when new DynamoDB tables are created",
        "Name": "Replication-Watcher-Create",
        "State": "ENABLED",
        "EventPattern": {
          "detail-type": [
             "AWS API Call via CloudTrail"
           ],
           "detail": {
             "eventSource": [
               "dynamodb.amazonaws.com"
             ],
             "eventName": [
               "CreateTable"
             ]
           }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherCreateFunction", "Arn" ] },
            "Id": "Replication-Watcher-Create"
          }
        ]
      }
    },
    "WatcherCreatePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherCreateFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherCreateRule", "Arn" ] }
      }
    },
    "WatcherDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/delete/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherDeletePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "StopReplication",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Delete",
        "Description": "Stops/removes replication when a source dynamodb table is deleted",
        "Role": { "Fn::GetAtt": [ "WatcherDeleteRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/delete.min.js",
              "context": {
                "controllerTable": { "Ref": "ControllerTableName" }
              }
            }
          }
        }
      }
    },
    "WatcherDeleteRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher function when any DynamoDB tables are deleted",
        "Name": "Replication-Watcher-Delete",
        "State": "ENABLED",
        "EventPattern": {
          "detail-type": [
             "AWS API Call via CloudTrail"
           ],
           "detail": {
             "eventSource": [
               "dynamodb.amazonaws.com"
             ],
             "eventName": [
               "DeleteTable"
             ]
           }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherDeleteFunction", "Arn" ] },
            "Id": "Replication-Watcher-Delete"
          }
        ]
      }
    },
    "WatcherDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherDeleteFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherDeleteRule", "Arn" ] }
      }
    },
    "WatcherInitRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/init/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherInitPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "PrefixTableStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" }, "/stream/*" ] ] }
                },
                {
                  "Sid": "InvokeCreateFunction",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "lambda", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "function", { "Ref": "WatcherCreateFunction" } ] ] }
                },
                {
                  "Sid": "ListTables",
                  "Action": [
                    "dynamodb:ListTables"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherInitFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Init",
        "Description": "When a new prefix is added to the list, start replication for all existing matching tables",
        "Role": { "Fn::GetAtt": [ "WatcherInitRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/init.min.js",
              "context": {
                "createFunction": { "Ref": "WatcherCreateFunction" }
              }
            }
          }
        }
      }
    },
    "WatcherInitEvent": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "WatcherInitFunction", "Arn" ] },
        "EventSourceArn": { "Fn::GetAtt": [ "PrefixTable", "StreamArn" ] },
        "BatchSize": 1,
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "ReplicationApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": { "Ref": "ApiName" },
        "Description": "DynamoDB Replication Api"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ApiReplicationsPostMethod", "ApiReplicationsIdentifierDeleteMethod", "ApiReplicationsGetMethod",
        "ApiPrefixesPostMethod", "ApiPrefixesIdentifierDeleteMethod", "ApiPrefixesGetMethod"
      ],
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi"},
        "Description": "FLUFF",
        "StageName": "DEPLOY"
      }
    },
    "ApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "PROD",
        "Description": "PROD",
        "RestApiId": { "Ref": "ReplicationApi" },
        "DeploymentId": { "Ref": "ApiDeployment" },
        "Variables": {
          "CONTROLLER_TABLE": { "Ref": "ControllerTableName" },
          "PREFIX_TABLE": { "Ref": "PrefixTableName" }
        }
      }
    },
    "ApiKey": {
      "Type": "AWS::ApiGateway::ApiKey",
      "DependsOn": [ "ApiDeployment", "ApiStage" ],
      "Properties": {
        "Name": "ReplicationConsoleApiKey",
        "Description": "fluff",
        "Enabled": true,
        "StageKeys": [
          {
            "RestApiId": { "Ref": "ReplicationApi" },
            "StageName": { "Ref": "ApiStage" }
          }
        ]
      }
    },
    "ApiReplicationsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ReplicationApi" },
        "ParentId": { "Fn::GetAtt": [ "ReplicationApi", "RootResourceId" ] },
        "PathPart": "replications"
      }
    },
    "ApiReplicationsIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiReplicationsResource" },
        "PathPart": "{replication}"
      }
    },
    "ApiPrefixesResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Fn::GetAtt": [ "ReplicationApi", "RootResourceId" ] },
        "PathPart": "prefixes"
      }
    },
    "ApiPrefixesIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiPrefixesResource" },
        "PathPart": "{prefix}"
      }
    },
    "ApiReplicationsPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiReplicationsPostFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": $input.json('$.key'),\n \"controller\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiTableGetFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsIdentifierDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsIdentifierResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiReplicationsDeleteFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$input.params('replication')\",\n \"controller\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsIdentifierCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsIdentifierResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiPrefixesPostFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"prefix\": $input.json('$.key'),\n \"prefixTable\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiTableGetFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesIdentifierDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesIdentifierResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiPrefixesDeleteFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"prefix\": \"$input.params('prefix')\",\n \"prefixTable\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesIdentifierCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesIdentifierResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiTableGetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/table/get/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiTableGetPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "ScanTables",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiTableGetFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Table-Get",
        "Description": "Returns a list of all replications",
        "Role": { "Fn::GetAtt": [ "ApiTableGetRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/get.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsGetPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiTableGetFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/GET/replications" ] ] }
      }
    },
    "ApiPrefixesGetPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiTableGetFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/GET/prefixes" ] ] }
      }
    },
    "ApiReplicationsPostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/replications/post/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiReplicationsPostPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CheckSource",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                },
                {
                  "Sid": "AddReplication",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiReplicationsPostFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Replications-Post",
        "Description": "Adds a replication to the controller table",
        "Role": { "Fn::GetAtt": [ "ApiReplicationsPostRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/replications/post.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsPostPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiReplicationsPostFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/POST/replications" ] ] }
      }
    },
    "ApiReplicationsDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/replications/delete/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiReplicationsDeletePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "StopReplication",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiReplicationsDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Replications-Delete",
        "Description": "Removes an existing replication from the controller table",
        "Role": { "Fn::GetAtt": [ "ApiReplicationsDeleteRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/replications/delete.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiReplicationsDeleteFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/DELETE/replications/{replication}" ] ] }
      }
    },
    "ApiPrefixesPostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/prefixes/post/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiPrefixesPostPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "AddPrefix",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiPrefixesPostFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Prefixes-Post",
        "Description": "Add a new prefix to the prefix table",
        "Role": { "Fn::GetAtt": [ "ApiPrefixesPostRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/prefixes/post.min.js"
            }
          }
        }
      }
    },
    "ApiPrefixesPostPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiPrefixesPostFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/POST/prefixes" ] ] }
      }
    },
    "ApiPrefixesDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/prefixes/delete/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiPrefixesDeletePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "DeletePrefix",
                  "Action": [
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiPrefixesDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Prefixes-Delete",
        "Description": "Remove an existing prefix from the prefix table",
        "Role": { "Fn::GetAtt": [ "ApiPrefixesDeleteRole", "Arn" ] },
        "Runtime": "nodejs4.3",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/prefixes/delete.min.js"
            }
          }
        }
      }
    },
    "ApiPrefixesDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiPrefixesDeleteFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/DELETE/prefixes/{prefix}" ] ] }
      }
    }
  },
  "Outputs": {
    "InvokeURL": {
      "Description": "Base URL for api",
      "Value": { "Fn::Join": [ "", [ "https://", { "Ref": "ReplicationApi" }, ".execute-api.", { "Ref": "AWS::Region" }, ".amazonaws.com/", { "Ref": "ApiStage" } ] ] }
    },
    "ApiKey": {
      "Description": "API Key for the web console",
      "Value": { "Ref": "ApiKey" }
    }
  }
}
